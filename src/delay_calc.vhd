-- -------------------------------------------------------------
-- 
-- File Name: C:\Repos\raven\040_RTL\delay_calc\delay_calc\delay_calc.vhd
-- Created: 2023-06-16 11:37:40
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0
-- Target subsystem base rate: inf
-- 
-- -------------------------------------------------------------
-- -------------------------------------------------------------
-- 
-- Module: delay_calc
-- Source Path: delay_calc/delay_calc
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity delay_calc is
  generic (
    Tclk_g          : std_logic_vector(11 downto 0) := x"355"; -- ufix12_En8
    T_prop_amp_g    : std_logic_vector(7 downto 0)  := x"1c";  -- uint8
    T_prop_comp_g   : std_logic_vector(7 downto 0)  := x"07";   -- uint8
    T_prop_sw_on_g  : std_logic_vector(7 downto 0)  := x"44";  -- uint8
    T_prop_sw_off_g : std_logic_vector(7 downto 0)  := x"37";  -- uint8
    vout_gain_g     : std_logic_vector(9 downto 0)  := "1011110010"; --754 -- ufix10
    vin_gain_g      : std_logic_vector(9 downto 0)  := "0011111000"  --248   -- ufix10
  );
  port (
    Tsw         : in std_logic_vector(11 downto 0); -- ufix12
    vref        : in std_logic_vector(11 downto 0); -- ufix12
    vin         : in std_logic_vector(11 downto 0); -- ufix12
    trim_on     : in std_logic_vector(7 downto 0);  -- int8
    trim_off    : in std_logic_vector(7 downto 0);  -- int8
    n_on_delay  : out std_logic_vector(9 downto 0); -- ufix10
    n_off_delay : out std_logic_vector(9 downto 0)  -- ufix10
  );
end delay_calc;
architecture rtl of delay_calc is

  -- Signals
  SIGNAL vref_unsigned                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Data_Type_Conversion_out1        : unsigned(17 DOWNTO 0);  -- ufix18_En6
  SIGNAL vin_unsigned                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Data_Type_Conversion2_out1       : unsigned(17 DOWNTO 0);  -- ufix18_En6
  SIGNAL vout_gain_unsigned               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Divide3_out1                     : unsigned(9 DOWNTO 0);  -- ufix10_En6
  SIGNAL Data_Type_Conversion1_out1       : unsigned(27 DOWNTO 0);  -- ufix28_En16
  SIGNAL vin_gain_unsigned                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Divide4_out1                     : unsigned(9 DOWNTO 0);  -- ufix10_En6
  SIGNAL duty_cycle                       : unsigned(9 DOWNTO 0);  -- ufix10_En10
  SIGNAL Tsw_unsigned                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Product_mul_temp                 : unsigned(21 DOWNTO 0);  -- ufix22_En10
  SIGNAL rise_time                        : unsigned(13 DOWNTO 0);  -- ufix14_En2
  SIGNAL on_delay_ns                      : unsigned(13 DOWNTO 0);  -- ufix14_En3
  SIGNAL T_Prop_amp_unsigned              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tclk_unsigned                    : unsigned(11 DOWNTO 0);  -- ufix12_En8
  SIGNAL T_Prop_comp_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add3_stage2_add_cast             : unsigned(16 DOWNTO 0);  -- ufix17_En7
  SIGNAL Add3_stage2_add_cast_1           : unsigned(16 DOWNTO 0);  -- ufix17_En7
  SIGNAL Add3_stage2_add_temp             : unsigned(16 DOWNTO 0);  -- ufix17_En7
  SIGNAL Add3_op_stage1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Shift_Arithmetic3_out1           : unsigned(11 DOWNTO 0);  -- ufix12_En7
  SIGNAL Add3_stage3_add_cast             : unsigned(16 DOWNTO 0);  -- ufix17_En7
  SIGNAL Add3_stage3_add_cast_1           : unsigned(16 DOWNTO 0);  -- ufix17_En7
  SIGNAL Add3_out1                        : unsigned(16 DOWNTO 0);  -- ufix17_En7
  SIGNAL Add_stage2_sub_cast              : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add_stage2_sub_cast_1            : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add_op_stage1                    : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL T_Prop_sw_on_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_stage3_sub_cast              : signed(19 DOWNTO 0);  -- sfix20_En7
  SIGNAL Add_stage3_sub_cast_1            : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add_stage3_sub_cast_2            : signed(19 DOWNTO 0);  -- sfix20_En7
  SIGNAL Add_stage3_sub_temp              : signed(19 DOWNTO 0);  -- sfix20_En7
  SIGNAL Add_stage3_cast                  : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add_out1                         : unsigned(17 DOWNTO 0);  -- ufix18_En8
  SIGNAL Divide1_out1                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL trim_on_signed                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Add1_add_cast                    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Add1_add_temp                    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Add1_out1                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Constant_out1                    : unsigned(9 DOWNTO 0);  -- ufix10_En10
  SIGNAL Add2_sub_cast                    : signed(10 DOWNTO 0);  -- sfix11_En10
  SIGNAL Add2_sub_cast_1                  : signed(10 DOWNTO 0);  -- sfix11_En10
  SIGNAL Add2_sub_temp                    : signed(10 DOWNTO 0);  -- sfix11_En10
  SIGNAL Add2_out1                        : unsigned(9 DOWNTO 0);  -- ufix10_En10
  SIGNAL Product1_mul_temp                : unsigned(21 DOWNTO 0);  -- ufix22_En10
  SIGNAL fall_time                        : unsigned(13 DOWNTO 0);  -- ufix14_En2
  SIGNAL off_delay_ns                     : unsigned(13 DOWNTO 0);  -- ufix14_En3
  SIGNAL Add4_stage2_sub_cast             : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add4_stage2_sub_cast_1           : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add4_op_stage1                   : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL T_Prop_sw_off_unsigned           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add4_stage3_sub_cast             : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add4_stage3_sub_temp             : signed(18 DOWNTO 0);  -- sfix19_En7
  SIGNAL Add4_out1                        : unsigned(18 DOWNTO 0);  -- ufix19_En8
  SIGNAL Divide2_out1                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL trim_off_signed                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Add5_sub_cast                    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Add5_sub_temp                    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Add5_out1                        : unsigned(9 DOWNTO 0);  -- ufix10

BEGIN
  vref_unsigned <= unsigned(vref);

  Data_Type_Conversion_out1 <= vref_unsigned & '0' & '0' & '0' & '0' & '0' & '0';

  vin_unsigned <= unsigned(vin);

  Data_Type_Conversion2_out1 <= vin_unsigned & '0' & '0' & '0' & '0' & '0' & '0';

  vout_gain_unsigned <= unsigned(vout_gain_g);

  Divide3_output : PROCESS (Data_Type_Conversion_out1, vout_gain_unsigned)
    VARIABLE varargout_1 : unsigned(17 DOWNTO 0);
    VARIABLE div_temp : unsigned(18 DOWNTO 0);
    VARIABLE cast : unsigned(18 DOWNTO 0);
  BEGIN
    div_temp := to_unsigned(16#00000#, 19);
    cast := to_unsigned(16#00000#, 19);
    IF vout_gain_unsigned = to_unsigned(16#000#, 10) THEN 
      varargout_1 := to_unsigned(16#3FFFF#, 18);
    ELSE 
      cast := resize(Data_Type_Conversion_out1, 19);
      div_temp := cast / vout_gain_unsigned;
      IF div_temp(18) /= '0' THEN 
        varargout_1 := "111111111111111111";
      ELSE 
        varargout_1 := div_temp(17 DOWNTO 0);
      END IF;
    END IF;
    IF varargout_1(17 DOWNTO 10) /= "00000000" THEN 
      Divide3_out1 <= "1111111111";
    ELSE 
      Divide3_out1 <= varargout_1(9 DOWNTO 0);
    END IF;
  END PROCESS Divide3_output;


  Data_Type_Conversion1_out1 <= resize(Divide3_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 28);

  vin_gain_unsigned <= unsigned(vin_gain_G);

  Divide4_output : PROCESS (Data_Type_Conversion2_out1, vin_gain_unsigned)
    VARIABLE varargout_11 : unsigned(17 DOWNTO 0);
    VARIABLE div_temp1 : unsigned(18 DOWNTO 0);
    VARIABLE cast1 : unsigned(18 DOWNTO 0);
  BEGIN
    div_temp1 := to_unsigned(16#00000#, 19);
    cast1 := to_unsigned(16#00000#, 19);
    IF vin_gain_unsigned = to_unsigned(16#000#, 10) THEN 
      varargout_11 := to_unsigned(16#3FFFF#, 18);
    ELSE 
      cast1 := resize(Data_Type_Conversion2_out1, 19);
      div_temp1 := cast1 / vin_gain_unsigned;
      IF div_temp1(18) /= '0' THEN 
        varargout_11 := "111111111111111111";
      ELSE 
        varargout_11 := div_temp1(17 DOWNTO 0);
      END IF;
    END IF;
    IF varargout_11(17 DOWNTO 10) /= "00000000" THEN 
      Divide4_out1 <= "1111111111";
    ELSE 
      Divide4_out1 <= varargout_11(9 DOWNTO 0);
    END IF;
  END PROCESS Divide4_output;


  Divide_output : PROCESS (Data_Type_Conversion1_out1, Divide4_out1)
    VARIABLE varargout_12 : unsigned(27 DOWNTO 0);
    VARIABLE div_temp2 : unsigned(27 DOWNTO 0);
  BEGIN
    div_temp2 := to_unsigned(16#0000000#, 28);
    IF Divide4_out1 = to_unsigned(16#000#, 10) THEN 
      varargout_12 := to_unsigned(16#FFFFFFF#, 28);
    ELSE 
      div_temp2 := Data_Type_Conversion1_out1 / Divide4_out1;
      varargout_12 := div_temp2;
    END IF;
    IF varargout_12(27 DOWNTO 10) /= "000000000000000000" THEN 
      duty_cycle <= "1111111111";
    ELSE 
      duty_cycle <= varargout_12(9 DOWNTO 0);
    END IF;
  END PROCESS Divide_output;


  Tsw_unsigned <= unsigned(Tsw);

  Product_mul_temp <= duty_cycle * Tsw_unsigned;
  rise_time <= Product_mul_temp(21 DOWNTO 8);

  on_delay_ns <= rise_time;

  T_Prop_amp_unsigned <= unsigned(T_Prop_amp_g);

  Tclk_unsigned <= unsigned(Tclk_g);

  T_Prop_comp_unsigned <= unsigned(T_Prop_comp_g);

  Add3_stage2_add_cast <= resize(T_Prop_amp_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);
  Add3_stage2_add_cast_1 <= resize(T_Prop_comp_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);
  Add3_stage2_add_temp <= Add3_stage2_add_cast + Add3_stage2_add_cast_1;
  Add3_op_stage1 <= Add3_stage2_add_temp(15 DOWNTO 7);

  Shift_Arithmetic3_out1 <= Tclk_unsigned;

  Add3_stage3_add_cast <= resize(Add3_op_stage1 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);
  Add3_stage3_add_cast_1 <= resize(Shift_Arithmetic3_out1, 17);
  Add3_out1 <= Add3_stage3_add_cast + Add3_stage3_add_cast_1;

  Add_stage2_sub_cast <= signed(resize(on_delay_ns & '0' & '0' & '0' & '0', 19));
  Add_stage2_sub_cast_1 <= signed(resize(Add3_out1, 19));
  Add_op_stage1 <= Add_stage2_sub_cast - Add_stage2_sub_cast_1;

  T_Prop_sw_on_unsigned <= unsigned(T_Prop_sw_on_g);

  Add_stage3_sub_cast <= resize(Add_op_stage1, 20);
  Add_stage3_sub_cast_1 <= signed(resize(T_Prop_sw_on_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0', 19));
  Add_stage3_sub_cast_2 <= resize(Add_stage3_sub_cast_1, 20);
  Add_stage3_sub_temp <= Add_stage3_sub_cast - Add_stage3_sub_cast_2;
  
  Add_stage3_cast <= "0111111111111111111" WHEN (Add_stage3_sub_temp(19) = '0') AND (Add_stage3_sub_temp(18) /= '0') ELSE
      "1000000000000000000" WHEN (Add_stage3_sub_temp(19) = '1') AND (Add_stage3_sub_temp(18) /= '1') ELSE
      Add_stage3_sub_temp(18 DOWNTO 0);
  
  Add_out1 <= "111111111111111111" WHEN (Add_stage3_cast(18) = '0') AND (Add_stage3_cast(17) /= '0') ELSE
      "000000000000000000" WHEN Add_stage3_cast(18) = '1' ELSE
      unsigned(Add_stage3_cast(16 DOWNTO 0) & '0');

  Divide1_output : PROCESS (Add_out1, Tclk_unsigned)
    VARIABLE varargout_13 : unsigned(17 DOWNTO 0);
    VARIABLE div_temp3 : unsigned(17 DOWNTO 0);
  BEGIN
    div_temp3 := to_unsigned(16#00000#, 18);
    IF Tclk_unsigned = to_unsigned(16#000#, 12) THEN 
      varargout_13 := to_unsigned(16#3FFFF#, 18);
    ELSE 
      div_temp3 := Add_out1 / Tclk_unsigned;
      varargout_13 := div_temp3;
    END IF;
    IF varargout_13(17 DOWNTO 10) /= "00000000" THEN 
      Divide1_out1 <= "1111111111";
    ELSE 
      Divide1_out1 <= varargout_13(9 DOWNTO 0);
    END IF;
  END PROCESS Divide1_output;


  trim_on_signed <= signed(trim_on);

  Add1_add_cast <= signed(resize(Divide1_out1, 12));
  Add1_add_temp <= Add1_add_cast + resize(trim_on_signed, 12);
  Add1_out1 <= unsigned(Add1_add_temp(9 DOWNTO 0));

  n_on_delay <= std_logic_vector(Add1_out1);

  Constant_out1 <= to_unsigned(16#3FF#, 10);

  Add2_sub_cast <= signed(resize(Constant_out1, 11));
  Add2_sub_cast_1 <= signed(resize(duty_cycle, 11));
  Add2_sub_temp <= Add2_sub_cast - Add2_sub_cast_1;
  Add2_out1 <= unsigned(Add2_sub_temp(9 DOWNTO 0));

  Product1_mul_temp <= Add2_out1 * Tsw_unsigned;
  fall_time <= Product1_mul_temp(21 DOWNTO 8);

  off_delay_ns <= fall_time;

  Add4_stage2_sub_cast <= signed(resize(off_delay_ns & '0' & '0' & '0' & '0', 19));
  Add4_stage2_sub_cast_1 <= signed(resize(Add3_out1, 19));
  Add4_op_stage1 <= Add4_stage2_sub_cast - Add4_stage2_sub_cast_1;

  T_Prop_sw_off_unsigned <= unsigned(T_Prop_sw_off_g);

  Add4_stage3_sub_cast <= signed(resize(T_Prop_sw_off_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0', 19));
  Add4_stage3_sub_temp <= Add4_op_stage1 - Add4_stage3_sub_cast;
  Add4_out1 <= unsigned(Add4_stage3_sub_temp(17 DOWNTO 0) & '0');

  Divide2_output : PROCESS (Add4_out1, Tclk_unsigned)
    VARIABLE varargout_14 : unsigned(18 DOWNTO 0);
    VARIABLE div_temp4 : unsigned(18 DOWNTO 0);
  BEGIN
    div_temp4 := to_unsigned(16#00000#, 19);
    IF Tclk_unsigned = to_unsigned(16#000#, 12) THEN 
      varargout_14 := to_unsigned(16#7FFFF#, 19);
    ELSE 
      div_temp4 := Add4_out1 / Tclk_unsigned;
      varargout_14 := div_temp4;
    END IF;
    IF varargout_14(18 DOWNTO 10) /= "000000000" THEN 
      Divide2_out1 <= "1111111111";
    ELSE 
      Divide2_out1 <= varargout_14(9 DOWNTO 0);
    END IF;
  END PROCESS Divide2_output;


  trim_off_signed <= signed(trim_off);

  Add5_sub_cast <= signed(resize(Divide2_out1, 12));
  Add5_sub_temp <= Add5_sub_cast - resize(trim_off_signed, 12);
  Add5_out1 <= unsigned(Add5_sub_temp(9 DOWNTO 0));

  n_off_delay <= std_logic_vector(Add5_out1);

END rtl;

