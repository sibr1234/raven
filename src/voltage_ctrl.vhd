
-- -------------------------------------------------------------
-- 
-- File Name: C:\Repos\raven\030_concept\20_digital concept\10_simulation\digital_12_3V3_meas\voltage_compensator_digital_discrete_nf2.vhd
-- Created: 2023-06-26 10:00:10
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.25e-06
-- Target subsystem base rate: 1.25e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.25e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- IREF                          ce_out        1.25e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: voltage_compensator_digital_discrete_nf2
-- Source Path: digital_12_3V3_meas/voltage compensator_digital_discrete_nf2
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY voltage_ctrl IS
  PORT( clk                               :   IN    std_logic;
        reset_n                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        VOUT                              :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        VREF                              :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        a1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        a2                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        b0                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        b1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        b2                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        ce_out                            :   OUT   std_logic;
        IREF                              :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
        );
END voltage_ctrl;


ARCHITECTURE rtl OF voltage_ctrl IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL b1_signed                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL a2_signed                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL a1_signed                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL VREF_unsigned                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL VOUT_unsigned                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Add_stage2_sub_cast              : signed(31 DOWNTO 0);  -- sfix32_En4
  SIGNAL Add_stage2_sub_cast_1            : signed(31 DOWNTO 0);  -- sfix32_En4
  SIGNAL Add_stage2_sub_temp              : signed(31 DOWNTO 0);  -- sfix32_En4
  SIGNAL Add_op_stage1                    : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL b2_signed                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL b0_signed                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Sum_out1                         : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product_mul_temp                 : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Product_out1                     : signed(39 DOWNTO 0);  -- sfix40_En16
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product2_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Product2_out1                    : signed(33 DOWNTO 0);  -- sfix34_En16
  SIGNAL Delay2_out1                      : signed(16 DOWNTO 0);  -- sfix17_En4
  SIGNAL Shift_Arithmetic1_out1           : signed(16 DOWNTO 0);  -- sfix17_En4
  SIGNAL Data_Type_Conversion1_out1       : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL dtc_out                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Data_Type_Conversion2_out1       : signed(16 DOWNTO 0);  -- sfix17_En4
  SIGNAL Shift_Arithmetic2_out1           : signed(16 DOWNTO 0);  -- sfix17_En4
  SIGNAL Add_stage3_sub_cast              : signed(31 DOWNTO 0);  -- sfix32_En4
  SIGNAL Add_stage3_sub_cast_1            : signed(31 DOWNTO 0);  -- sfix32_En4
  SIGNAL Add_stage3_sub_temp              : signed(31 DOWNTO 0);  -- sfix32_En4
  SIGNAL error_rsvd                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Shift_Arithmetic_out1            : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Add2_out1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product3_out1                    : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Gain_cast                        : signed(64 DOWNTO 0);  -- sfix65_En32
  SIGNAL Gain_cast_1                      : signed(64 DOWNTO 0);  -- sfix65_En32
  SIGNAL Gain_cast_2                      : signed(127 DOWNTO 0);  -- sfix128_En95
  SIGNAL Gain_out1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product4_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Gain1_cast                       : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Gain1_cast_1                     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Gain1_cast_2                     : signed(63 DOWNTO 0);  -- sfix64_En47
  SIGNAL Gain1_out1                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Sum2_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Sum2_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Sum2_add_temp                    : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Sum2_out1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Sum_add_cast                     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Sum_add_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Sum_add_temp                     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Add2_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product1_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Product1_out1                    : signed(39 DOWNTO 0);  -- sfix40_En16
  SIGNAL Sum3_add_cast                    : signed(40 DOWNTO 0);  -- sfix41_En16
  SIGNAL Sum3_add_cast_1                  : signed(39 DOWNTO 0);  -- sfix40_En16
  SIGNAL Sum3_add_cast_2                  : signed(40 DOWNTO 0);  -- sfix41_En16
  SIGNAL Sum3_add_temp                    : signed(40 DOWNTO 0);  -- sfix41_En16
  SIGNAL right_side                       : signed(39 DOWNTO 0);  -- sfix40_En16
  SIGNAL Sum1_add_cast                    : signed(63 DOWNTO 0);  -- sfix64_En16
  SIGNAL Sum1_add_cast_1                  : signed(63 DOWNTO 0);  -- sfix64_En16
  SIGNAL Sum1_out1                        : signed(63 DOWNTO 0);  -- sfix64_En16

BEGIN
  b1_signed <= signed(b1);

  a2_signed <= signed(a2);

  enb <= clk_enable;

  a1_signed <= signed(a1);

  VREF_unsigned <= unsigned(VREF);

  VOUT_unsigned <= unsigned(VOUT);

  Add_stage2_sub_cast <= signed(resize(VREF_unsigned & '0' & '0' & '0' & '0', 32));
  Add_stage2_sub_cast_1 <= signed(resize(VOUT_unsigned & '0' & '0' & '0' & '0', 32));
  Add_stage2_sub_temp <= Add_stage2_sub_cast - Add_stage2_sub_cast_1;
  Add_op_stage1 <= Add_stage2_sub_temp(16 DOWNTO 4);

  b2_signed <= signed(b2);

  b0_signed <= signed(b0);

  Product_mul_temp <= b0_signed * Sum_out1;
  
  Product_out1 <= X"7FFFFFFFFF" WHEN (Product_mul_temp(63) = '0') AND (Product_mul_temp(62 DOWNTO 55) /= "00000000") ELSE
      X"8000000000" WHEN (Product_mul_temp(63) = '1') AND (Product_mul_temp(62 DOWNTO 55) /= "11111111") ELSE
      Product_mul_temp(55 DOWNTO 16);

  Product2_mul_temp <= b2_signed * Delay1_out1;
  
  Product2_out1 <= "0111111111111111111111111111111111" WHEN (Product2_mul_temp(63) = '0') AND (Product2_mul_temp(62 DOWNTO 49) /= "00000000000000") ELSE
      "1000000000000000000000000000000000" WHEN (Product2_mul_temp(63) = '1') AND (Product2_mul_temp(62 DOWNTO 49) /= "11111111111111") ELSE
      Product2_mul_temp(49 DOWNTO 16);

  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(Delay2_out1, 10);

  Add1_sub_cast <= signed(resize(dtc_out, 32));
  Add1_sub_temp <= resize(Data_Type_Conversion1_out1, 32) - Add1_sub_cast;
  Add1_out1 <= Add1_sub_temp(12 DOWNTO 0);

  Data_Type_Conversion2_out1 <= Add1_out1 & '0' & '0' & '0' & '0';

  Shift_Arithmetic2_out1 <= SHIFT_RIGHT(Data_Type_Conversion2_out1, 2);

  Delay2_process : PROCESS (clk, reset_n)
  BEGIN
    IF reset_n = '0' THEN
      Delay2_out1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Shift_Arithmetic2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Add_stage3_sub_cast <= resize(Add_op_stage1 & '0' & '0' & '0' & '0', 32);
  Add_stage3_sub_cast_1 <= resize(Delay2_out1, 32);
  Add_stage3_sub_temp <= Add_stage3_sub_cast - Add_stage3_sub_cast_1;
  error_rsvd <= Add_stage3_sub_temp(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  Shift_Arithmetic_out1 <= SHIFT_RIGHT(error_rsvd, 10);

  Product3_out1 <= a1_signed * Add2_out1;

  Gain_cast <= resize(Product3_out1, 65);
  Gain_cast_1 <=  - (Gain_cast);
  Gain_cast_2 <= Gain_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Gain_out1 <= Gain_cast_2(110 DOWNTO 79);

  Delay1_process : PROCESS (clk, reset_n)
  BEGIN
    IF reset_n = '0' THEN
      Delay1_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Product4_mul_temp <= a2_signed * Delay1_out1;
  
  Product4_out1 <= X"7FFFFFFF" WHEN (Product4_mul_temp(63) = '0') AND (Product4_mul_temp(62 DOWNTO 47) /= X"0000") ELSE
      X"80000000" WHEN (Product4_mul_temp(63) = '1') AND (Product4_mul_temp(62 DOWNTO 47) /= X"FFFF") ELSE
      Product4_mul_temp(47 DOWNTO 16);

  Gain1_cast <= resize(Product4_out1, 33);
  Gain1_cast_1 <=  - (Gain1_cast);
  Gain1_cast_2 <= Gain1_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Gain1_out1 <= Gain1_cast_2(62 DOWNTO 31);

  Sum2_add_cast <= resize(Gain1_out1, 33);
  Sum2_add_cast_1 <= resize(Gain_out1, 33);
  Sum2_add_temp <= Sum2_add_cast + Sum2_add_cast_1;
  
  Sum2_out1 <= X"7FFFFFFF" WHEN (Sum2_add_temp(32) = '0') AND (Sum2_add_temp(31) /= '0') ELSE
      X"80000000" WHEN (Sum2_add_temp(32) = '1') AND (Sum2_add_temp(31) /= '1') ELSE
      Sum2_add_temp(31 DOWNTO 0);

  Sum_add_cast <= resize(Sum2_out1, 33);
  Sum_add_cast_1 <= resize(Shift_Arithmetic_out1, 33);
  Sum_add_temp <= Sum_add_cast + Sum_add_cast_1;
  
  Sum_out1 <= X"7FFFFFFF" WHEN (Sum_add_temp(32) = '0') AND (Sum_add_temp(31) /= '0') ELSE
      X"80000000" WHEN (Sum_add_temp(32) = '1') AND (Sum_add_temp(31) /= '1') ELSE
      Sum_add_temp(31 DOWNTO 0);

  Delay_process : PROCESS (clk, reset_n)
  BEGIN
    IF reset_n = '0' THEN
      Delay_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Add2_sub_cast <= resize(Shift_Arithmetic1_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Add2_out1 <= Delay_out1 - Add2_sub_cast;

  Product1_mul_temp <= b1_signed * Add2_out1;
  
  Product1_out1 <= X"7FFFFFFFFF" WHEN (Product1_mul_temp(63) = '0') AND (Product1_mul_temp(62 DOWNTO 55) /= "00000000") ELSE
      X"8000000000" WHEN (Product1_mul_temp(63) = '1') AND (Product1_mul_temp(62 DOWNTO 55) /= "11111111") ELSE
      Product1_mul_temp(55 DOWNTO 16);

  Sum3_add_cast <= resize(Product1_out1, 41);
  Sum3_add_cast_1 <= resize(Product2_out1, 40);
  Sum3_add_cast_2 <= resize(Sum3_add_cast_1, 41);
  Sum3_add_temp <= Sum3_add_cast + Sum3_add_cast_2;
  
  right_side <= X"7FFFFFFFFF" WHEN (Sum3_add_temp(40) = '0') AND (Sum3_add_temp(39) /= '0') ELSE
      X"8000000000" WHEN (Sum3_add_temp(40) = '1') AND (Sum3_add_temp(39) /= '1') ELSE
      Sum3_add_temp(39 DOWNTO 0);

  Sum1_add_cast <= resize(right_side, 64);
  Sum1_add_cast_1 <= resize(Product_out1, 64);
  Sum1_out1 <= Sum1_add_cast + Sum1_add_cast_1;

  
  Data_Type_Conversion1_out1 <= "01111111111" WHEN (Sum1_out1(63) = '0') AND (Sum1_out1(62 DOWNTO 26) /= "0000000000000000000000000000000000000") ELSE
      "10000000000" WHEN (Sum1_out1(63) = '1') AND (Sum1_out1(62 DOWNTO 26) /= "1111111111111111111111111111111111111") ELSE
      Sum1_out1(26 DOWNTO 16);

  
  dtc_out <= "0000000000" WHEN Data_Type_Conversion1_out1(10) = '1' ELSE
      unsigned(Data_Type_Conversion1_out1(9 DOWNTO 0));

  IREF <= std_logic_vector(dtc_out);

  ce_out <= clk_enable;

END rtl;
